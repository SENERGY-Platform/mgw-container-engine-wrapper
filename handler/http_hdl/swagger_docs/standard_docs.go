// Package swagger_docs Code generated by swaggo/swag. DO NOT EDIT
package swagger_docs

import "github.com/swaggo/swag"

const docTemplatestandard = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache-2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/containers": {
            "get": {
                "description": "List all containers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by label (e.g.: l1=v1,l2=v2,l3)",
                        "name": "labels",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "containers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Container"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new container.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create container",
                "parameters": [
                    {
                        "description": "container data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Container"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "container ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/containers/{id}": {
            "get": {
                "description": "Get a container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "container data",
                        "schema": {
                            "$ref": "#/definitions/model.Container"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a container",
                "tags": [
                    "Containers"
                ],
                "summary": "Delete container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "force remove",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/containers/{id}/exec": {
            "patch": {
                "description": "Execute a command in a running container.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Execute command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "command data",
                        "name": "cmd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ExecConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "job ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/containers/{id}/restart": {
            "patch": {
                "description": "Restart a container.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Restart container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": " job ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/containers/{id}/start": {
            "patch": {
                "description": "Start a container.",
                "tags": [
                    "Containers"
                ],
                "summary": "Start container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/containers/{id}/stop": {
            "patch": {
                "description": "Stop a container.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Stop container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "job ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/images": {
            "get": {
                "description": "List all container images.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by image tag",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by labels (e.g. l1=v1,l2=v2,l3)",
                        "name": "labels",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "images",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Image"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Download a container image.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/plain"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Add image",
                "parameters": [
                    {
                        "description": "image data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "job ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/images/{id}": {
            "get": {
                "description": "Get container image info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "image data",
                        "schema": {
                            "$ref": "#/definitions/model.Image"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a container image.",
                "tags": [
                    "Images"
                ],
                "summary": "Delete image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Get basic service and runtime information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Info"
                ],
                "summary": "Get service info",
                "responses": {
                    "200": {
                        "description": "info",
                        "schema": {
                            "$ref": "#/definitions/lib.SrvInfo"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "description": "List all jobs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "List jobs",
                "parameters": [
                    {
                        "enum": [
                            "pending",
                            "running",
                            "canceled",
                            "completed",
                            "error",
                            "ok"
                        ],
                        "type": "string",
                        "description": "status to filter by",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "sort in descending order",
                        "name": "sort_desc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "list jobs since timestamp",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "list jobs until timestamp",
                        "name": "until",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "jobs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/lib.Job"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/jobs/{id}": {
            "get": {
                "description": "Get a job.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Get job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "job id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "job",
                        "schema": {
                            "$ref": "#/definitions/lib.Job"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/jobs/{id}/cancel": {
            "patch": {
                "description": "Cancels a job.",
                "tags": [
                    "Jobs"
                ],
                "summary": "Cancel job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "job id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logs/{id}": {
            "get": {
                "description": "Get a container's log.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "max num of lines",
                        "name": "max_lines",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339Nano timestamp",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339Nano timestamp",
                        "name": "until",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "log",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/networks": {
            "get": {
                "description": "List all container networks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Get networks",
                "responses": {
                    "200": {
                        "description": "networks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Network"
                            }
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new container network.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Create network",
                "parameters": [
                    {
                        "description": "network data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Network"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "network ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/networks/{id}": {
            "get": {
                "description": "Get a container network.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Get network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "network info",
                        "schema": {
                            "$ref": "#/definitions/model.Network"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a container network.",
                "tags": [
                    "Networks"
                ],
                "summary": "Delete network",
                "parameters": [
                    {
                        "type": "string",
                        "description": "network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/volumes": {
            "get": {
                "description": "List all storage volumes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Get volumes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by label (e.g.: l1=v1,l2=v2,l3)",
                        "name": "labels",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "volumes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Volume"
                            }
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new storage volume.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Create volume",
                "parameters": [
                    {
                        "description": "volume data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Volume"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "volume ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/volumes/{id}": {
            "get": {
                "description": "Get storage volume info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Get volume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volume ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "volume data",
                        "schema": {
                            "$ref": "#/definitions/model.Volume"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a storage volume.",
                "tags": [
                    "Volumes"
                ],
                "summary": "Delete volume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "volume ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "force delete",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "lib.Job": {
            "type": "object",
            "properties": {
                "canceled": {
                    "type": "string"
                },
                "completed": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/lib.JobErr"
                },
                "id": {
                    "type": "string"
                },
                "result": {},
                "started": {
                    "type": "string"
                }
            }
        },
        "lib.JobErr": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "lib.MemStats": {
            "type": "object",
            "properties": {
                "alloc": {
                    "type": "integer"
                },
                "alloc_total": {
                    "type": "integer"
                },
                "gc_cycles": {
                    "type": "integer"
                },
                "sys_total": {
                    "type": "integer"
                }
            }
        },
        "lib.SrvInfo": {
            "type": "object",
            "properties": {
                "mem_stats": {
                    "$ref": "#/definitions/lib.MemStats"
                },
                "name": {
                    "type": "string"
                },
                "up_time": {
                    "$ref": "#/definitions/time.Duration"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.Container": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Device"
                    }
                },
                "env_vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "health": {
                    "$ref": "#/definitions/model.ContainerHealth"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Mount"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ContainerNet"
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Port"
                    }
                },
                "run_config": {
                    "$ref": "#/definitions/model.RunConfig"
                },
                "started": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/model.ContainerState"
                }
            }
        },
        "model.ContainerHealth": {
            "type": "string",
            "enum": [
                "healthy",
                "unhealthy",
                "transitioning"
            ],
            "x-enum-varnames": [
                "HealthyState",
                "UnhealthyState",
                "TransitionState"
            ]
        },
        "model.ContainerNet": {
            "type": "object",
            "properties": {
                "domain_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "mac_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.ContainerState": {
            "type": "string",
            "enum": [
                "initialized",
                "running",
                "paused",
                "restarting",
                "removing",
                "stopped",
                "dead"
            ],
            "x-enum-varnames": [
                "InitState",
                "RunningState",
                "PausedState",
                "RestartingState",
                "RemovingState",
                "StoppedState",
                "DeadState"
            ]
        },
        "model.Device": {
            "type": "object",
            "properties": {
                "read_only": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "model.ExecConfig": {
            "type": "object",
            "properties": {
                "cmd": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envVars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tty": {
                    "type": "boolean"
                },
                "workDir": {
                    "type": "string"
                }
            }
        },
        "model.Image": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "digests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.ImageRequest": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                }
            }
        },
        "model.Mount": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mode": {
                    "type": "integer"
                },
                "read_only": {
                    "type": "boolean"
                },
                "size": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/model.MountType"
                }
            }
        },
        "model.MountType": {
            "type": "string",
            "enum": [
                "bind",
                "volume",
                "tmpfs"
            ],
            "x-enum-varnames": [
                "BindMount",
                "VolumeMount",
                "TmpfsMount"
            ]
        },
        "model.Network": {
            "type": "object",
            "properties": {
                "gateway": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "subnet": {
                    "$ref": "#/definitions/model.Subnet"
                },
                "type": {
                    "$ref": "#/definitions/model.NetworkType"
                }
            }
        },
        "model.NetworkType": {
            "type": "string",
            "enum": [
                "bridge",
                "macvlan",
                "host"
            ],
            "x-enum-varnames": [
                "BridgeNet",
                "MACVlanNet",
                "HostNet"
            ]
        },
        "model.Port": {
            "type": "object",
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PortBinding"
                    }
                },
                "number": {
                    "type": "integer"
                },
                "protocol": {
                    "$ref": "#/definitions/model.PortType"
                }
            }
        },
        "model.PortBinding": {
            "type": "object",
            "properties": {
                "interface": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "number": {
                    "type": "integer"
                }
            }
        },
        "model.PortType": {
            "type": "string",
            "enum": [
                "tcp",
                "udp",
                "sctp"
            ],
            "x-enum-varnames": [
                "TcpPort",
                "UdpPort",
                "SctpPort"
            ]
        },
        "model.RestartStrategy": {
            "type": "string",
            "enum": [
                "never",
                "always",
                "not-stopped",
                "on-fail"
            ],
            "x-enum-varnames": [
                "RestartNever",
                "RestartAlways",
                "RestartNotStopped",
                "RestartOnFail"
            ]
        },
        "model.RunConfig": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pseudo_tty": {
                    "type": "boolean"
                },
                "remove_after_run": {
                    "type": "boolean"
                },
                "restart_strategy": {
                    "$ref": "#/definitions/model.RestartStrategy"
                },
                "retries": {
                    "type": "integer"
                },
                "stop_signal": {
                    "type": "string"
                },
                "stop_timeout": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "model.Subnet": {
            "type": "object",
            "properties": {
                "bits": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.Volume": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    }
}`

// SwaggerInfostandard holds exported Swagger Info so clients can modify it
var SwaggerInfostandard = &swag.Spec{
	Version:          "0.16.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Container Engine Wrapper API",
	Description:      "Provides access to container engine functions.",
	InfoInstanceName: "standard",
	SwaggerTemplate:  docTemplatestandard,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfostandard.InstanceName(), SwaggerInfostandard)
}
